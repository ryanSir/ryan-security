1>. Restful接口介绍，单元测试
    1. jsonPath 见gitHub
    2. 更多注解见 Hibernate Validator
2>. 服务异常处理 RestExceptionHandler
3>. 过滤器配置（Filter），以及引入外部过滤器配置：WebConfig ,过滤器是javax框架里提供的，并不会知道请求最终流向哪个控制器来处理，可以用拦截器，是spring框架提供的
4>. 拦截器（Interceptor）：TimeInterceptor ,afterCompletion 不能捕获自定义异常, 个人觉得是被捕获处理掉了。
    1. 拦截器ObjectHandler 只能获取接口的声明，并不能获取具体参数
5>. 切面（Aspect）：
    1. 切入点(注解)
        1.1 在哪些方法上起作用
        1.2 在什么时候起作用
    2. 增强(方法)
        2.1 起作用时执行的业务逻辑
6>. 执行顺序：Filter > Interceptor > ControllerAdvice > Aspect > Controller
7>. 文件上传和下载
8>. 多线程提高REST服务性能
    8.1 Runnable 的实现方式副线程必须是由主线程发起调用，满足不了复杂场景
    8.2 DeferredResult作为返回参数时，必须有结果，否则会卡住
9>. swagger 自动生成html文档
10>. WireMock 伪造Rest服务 -- 新版jar不兼容，后续研究
    1. https://wiremock.org/docs/running-standalone/

11>. Spring Security
    1. BrowserSecurityConfig 配置表单登录
    2. 原理：一组过滤器链 <security基本原理.png>
    3. 源码解析： 第一次登录，直接到FilterSecurityInterceptor,读取BrowserSecurityConfig配置文件，没有登录名和密码，抛出异常，被ExceptionTranslationFilter捕获到，
       并重定向到登录页面，用户输入用户名密码，进入UserNamePasswordAuthenticationFilter,进行校验，通过后再次进入FilterSecurityInterceptor，校验通过，到业务层接口
    4. 自定义用户认证逻辑 UserDetailService
           MyUserDetailService
           BrowserSecurityConfig.passwordEncoder()配置
    5. 个性化用户认证流程 BrowserSecurityController
        1. 自定义登录页面  <处理不同类型请求跳转逻辑.png>
        2. 自定义登录成功处理
        3. 自定义登录失败处理
    6. 认证流程的源码及详解 - <认证流程源码.png>
        认证的处理流程说明
        认证结果如何在多个请求之间共享
        获取认证用户信息
12>. 实现图形验证码功能
        1. 开发生成图形验证码接口 ValidateCodeController
            1.1 根据随机数生成图片
            1.2 将随机数存到session中
            1.3 在将生成的图片写到接口响应中
        2. 在认证流程中加入图形验证码校验  ValidateCodeFilter
        3. 重构代码
            3.1 验证码基本参数可配置 <图形验证码基本参数配置.png>
            3.2 验证码拦截接口可配置
            3.3 验证码的生成逻辑可配置
        4. 实现"记住我"功能 <记住我原理.png>
13>. 实现短信验证码登录功能
        1. 开发短信验证码接口
        2. 校验短信验证码并登录
        3. 重构代码
14>. 短信验证码登录功能 <短信登录逻辑.png>







